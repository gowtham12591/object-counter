name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/ci_cd

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password@123
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      main-app:
        image: your-app-image  # Replace with your actual image name
        ports:
          - 8085:8085
        env:
          # Add any necessary environment variables
          DATABASE_URL: postgresql://postgres:password@123@postgres:5432/postgres

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests  # Ensure requests is installed for API testing

      - name: Lint and Test Application
        run: |
          python -m pytest tests

      - name: Wait for Services
        run: |
          # Add a script to check service readiness
          sleep 30
          echo "Checking service availability..."
          timeout 60 bash -c 'until curl -s http://localhost:8085/health; do sleep 5; done'

      - name: Test Main Project API
        env:
          API_URL: http://localhost:8085
        run: |
          python3 - << EOF
          import requests
          import os

          api_url = os.environ['API_URL']
          
          # Health check
          health_response = requests.get(f'{api_url}/health')
          assert health_response.status_code == 200, "Health check failed"
          print("Health check passed")

          # Object detection test
          with open('resources/images/boy.jpg', 'rb') as file:
              files = {
                  'file': file,
                  'threshold': (None, '0.9')
              }
              detection_response = requests.post(f'{api_url}/object-detec-count', files=files)
              assert detection_response.status_code == 200, "Object detection API test failed"
              print("Object detection test passed")
          EOF

      - name: Cleanup
        if: always()
        run: docker-compose down || true