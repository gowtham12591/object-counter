name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/ci_cd

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: app_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d app_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Services
        run: |
          docker-compose build

      - name: Start Services
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start

      - name: Check Service Logs
        run: |
          docker-compose logs

      - name: Test API Endpoints
        env:
          API_URL: http://localhost:8085
        run: |
          python3 - << EOF
          import requests
          import os
          import time

          api_url = os.environ['API_URL']
          max_retries = 5
          retry_delay = 10

          def test_endpoint(url, method='get', files=None, data=None):
              for attempt in range(max_retries):
                  try:
                      if method == 'get':
                          response = requests.get(url, timeout=10)
                      elif method == 'post':
                          response = requests.post(url, files=files, data=data, timeout=10)
                      
                      response.raise_for_status()
                      return response
                  except requests.exceptions.RequestException as e:
                      print(f"Attempt {attempt + 1} failed: {e}")
                      if attempt < max_retries - 1:
                          time.sleep(retry_delay)
                      else:
                          raise

          try:
              # Health Check
              health_response = test_endpoint(f'{api_url}/health')
              print("Health Check Passed")

              # Object Detection Test
              with open('resources/images/boy.jpg', 'rb') as file:
                  files = {
                      'file': file,
                      'threshold': (None, '0.9')
                  }
                  detection_response = test_endpoint(f'{api_url}/object-detec-count', method='post', files=files)
                  print("Object Detection Test Passed")

          except Exception as e:
              print(f"API Testing Failed: {e}")
              # Print additional diagnostic information
              import subprocess
              subprocess.run(["docker-compose", "ps"])
              subprocess.run(["docker-compose", "logs"])
              raise
          EOF

      - name: Cleanup
        if: always()
        run: |
          docker-compose down

      # Optional: Artifact upload for debugging
      - name: Upload Docker Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: docker-logs
          path: |
            docker-compose.yml
            docker-compose.logs